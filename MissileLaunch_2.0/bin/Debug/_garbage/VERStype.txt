// TYPEING FULL STRINGS VER . . .
#include "HEADERS\includes.hpp"
using namespace std;

int main()
{
	// Program setup . . .
	SaveWindow_HW();
	SetConsoleTitle(s_WindowTitle.c_str());
	GetComputerName();
	ConsoleColour(); CLR();




	// until the correct string has been
	while(b_Running)
	{
		/*/ 'Juice up' random number gen &
		// Assign the correct stuffs. . .
		for(int i = 0; i < 5; i++)
		{
			RandomNum_teamONE = diceRoll(randomGen);
			RandomNum_teamTWO = diceRoll(randomGen);
		}
		if(RandomNum_teamONE == 1){ s_TeamOneCommand = s_TeamOneCommand_pos_1; }
		if(RandomNum_teamTWO == 1){ s_TeamTwoCommand = s_TeamTwoCommand_pos_1; }
		if(RandomNum_teamONE == 2){ s_TeamOneCommand = s_TeamOneCommand_pos_2; }
		if(RandomNum_teamTWO == 2){ s_TeamTwoCommand = s_TeamTwoCommand_pos_2; }
		if(RandomNum_teamONE == 3){ s_TeamOneCommand = s_TeamOneCommand_pos_3; }
		if(RandomNum_teamTWO == 3){ s_TeamTwoCommand = s_TeamTwoCommand_pos_3; }*/




		// Loop Logo . . .
		for(int i = 0; i < 4; i++)
		{
			SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 10 + i);
			printf("   ____                                            _                 _               _             _    \n");
			printf("  |  _ \\ _ __ ___  ___ ___     __ _ _ __  _   _   | | _____ _   _   | |_ ___     ___| |_ __ _ _ __| |_  \n");
			printf("  | |_) | '__/ _ \\/ __/ __|   / _` | '_ \\| | | |  | |/ / _ \\ | | |  | __/ _ \\   / __| __/ _` | '__| __| \n");
			printf("  |  __/| | |  __/\\__ \\__ \\  | (_| | | | | |_| |  |   <  __/ |_| |  | || (_) |  \\__ \\ || (_| | |  | |_   _   _   _  \n");
			printf("  |_|   |_|  \\___||___/___/   \\__,_|_| |_|\\__, |  |_|\\_\\___|\\__, |   \\__\\___/   |___/\\__\\__,_|_|   \\__| (_) (_) (_) \n");
			printf("				           |___/             |___/ \n");
		}
		HOLT();
		b_GameRunning = TRUE;

		// Clear screen . . .
		ConsoleColour(); CLR();

		while(b_GameRunning)
		{
			// Get user input & log into the correct 'user profile'. . .
			printf("TEAM LOGIN "); GetUserInput();

			// Team 1 login . . .
			if(s_UserInput == s_TeamOneLogin)
			{
				printf("Team One launch Command "); GetUserInput();
				if(s_UserInput == s_TeamOneCommand)
				{
					TeamTwo_failCount = 50;
					printf("\n\nTeam One HAS LAUNCHED THE MISSILES! \n\n");
					Beep(1150, 2500);
				}
			}

			// Team 2 login . . .
			if(s_UserInput == s_TeamTwoLogin)
			{
				printf("Team Two launch Command "); GetUserInput();
				if(s_UserInput == s_TeamTwoCommand)
				{
					TeamOne_failCount = 50;
					printf("\n\nTeam One HAS LAUNCHED THE MISSILES! \n\n");
					Beep(1150, 2500);
				}
			}

			// If login fails . . .
			if(s_UserInput != s_TeamOneLogin || s_UserInput != s_TeamTwoLogin)
			{
				Beep(1150, 1500);

				TeamOne_failCount++;
				TeamTwo_failCount++;
			}

			// Team 2 login . . .
			/////////////////////////////////////////////////////

			// Sabotage detector . . .
			if(TeamOne_failCount > 2 && TeamTwo_failCount > 2)
			{
				printf(" !!! Possible Sabotage decected !!! \n");
				b_GameRunning = FALSE; break; HOLT();
			}
			// If team one fails . . .
			if(TeamOne_failCount > 2)
			{ b_GameRunning = FALSE; break; }
			// If team two fails . . .
			if(TeamTwo_failCount > 2)
			{ b_GameRunning = FALSE; break; }
		}

		// Reset variables . . .
		TeamOne_failCount = 0;
		TeamTwo_failCount = 0;

	}







	return 0;
}





//  Change a chactrer in a string to another char . . .
void Replace_Char(string& source, string const& find, string const& replace)
{
	for(string::size_type i = 0; (i = source.find(find, i)) != std::string::npos;)
	{
		source.replace(i, find.length(), replace);
		i += replace.length();
	}
}


void Replace_It()
{
	Replace_Char(s_UserInput, "a", "A");
	Replace_Char(s_UserInput, "b", "B");
	Replace_Char(s_UserInput, "c", "C");
	Replace_Char(s_UserInput, "d", "D");
	Replace_Char(s_UserInput, "e", "E");
	Replace_Char(s_UserInput, "f", "F");
	Replace_Char(s_UserInput, "g", "G");
	Replace_Char(s_UserInput, "h", "H");
	Replace_Char(s_UserInput, "i", "I");
	Replace_Char(s_UserInput, "j", "J");
	Replace_Char(s_UserInput, "k", "K");
	Replace_Char(s_UserInput, "l", "L");
	Replace_Char(s_UserInput, "m", "M");
	Replace_Char(s_UserInput, "n", "N");
	Replace_Char(s_UserInput, "o", "O");
	Replace_Char(s_UserInput, "p", "P");
	Replace_Char(s_UserInput, "q", "Q");
	Replace_Char(s_UserInput, "r", "R");
	Replace_Char(s_UserInput, "s", "S");
	Replace_Char(s_UserInput, "t", "T");
	Replace_Char(s_UserInput, "u", "U");
	Replace_Char(s_UserInput, "v", "V");
	Replace_Char(s_UserInput, "w", "W");
	Replace_Char(s_UserInput, "x", "X");
	Replace_Char(s_UserInput, "y", "Y");
	Replace_Char(s_UserInput, "z", "Z");
}
void GetUserInput() // Get user input . . .
{
	RedText(); printf("%s ", c_ComputerName);
	AquaText(); printf(": ");
	GreenText(); getline(cin, s_UserInput); ConsoleColour();
	Replace_It();
}
//////////////////////////////////////////////////////////////////


// PRESSING KEYS THAT COME UP ON SCREEN VER . . .
